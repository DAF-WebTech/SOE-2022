{"version":3,"sources":["../../../src/biodiversity/species-habitat/land-clearing-impact.js"],"sourcesContent":["//used by flora and fauna\n\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n\tconst years = soefinding.findingJson.meta.fields.slice(2)\n\tconst latest = years.at(-1)\n\n\n\t// create a new qld object\n\tconst qldArray = []\n\tfor (let i = 0; i < 7; ++i) {\n\t\tconst qldObj = {\n\t\t\tBioregion: \"Queensland\",\n\t\t\t\"Clearing type\": soefinding.findingJson.data[i][\"Clearing type\"],\n\t\t}\n\t\tyears.forEach(y => qldObj[y] = 0)\n\n\t\tqldArray.push(qldObj)\n\n\t}\n\n\t// sort our data so pie charts look better\n\tsoefinding.findingJson.data.sort(function (a, b) {\n\t\treturn b[latest] - a[latest]\n\t})\n\n\t// group our regions, and keep tally for qld\n\tconst regions = new Map()\n\tsoefinding.findingJson.data.forEach(d => {\n\n\t\tif (!regions.has(d.Bioregion))\n\t\t\tregions.set(d.Bioregion, [d])\n\t\telse\n\t\t\tregions.get(d.Bioregion).push(d)\n\n\t\tconst item = qldArray.find(q => q[\"Clearing type\"] == d[\"Clearing type\"])\n\t\tyears.forEach(y => item[y] += d[y])\n\t})\n\n\t// add our qld object into the map\n\tqldArray.sort(function (a, b) {\n\t\treturn b[latest] - a[latest]\n\t})\n\tregions.set(\"Queensland\", qldArray)\n\n\t// for each of our regions, sort them so the pie chart looks better\n\tfor (let [region, data] in regions) {\n\n\t}\n\n\t// series 1 is the last year values, in a pie chart\n\tfor (let [region, data] of regions) {\n\t\t// series 1 is the last year values, in a pie chart\n\t\tsoefinding.findingContent[region] = {\n\t\t\tseries1: data.map(d => d[latest]),\n\t\t\tlabels: data.map(d => d[\"Clearing type\"])\n\t\t}\n\n\t\t//chart 2, line chart, all regions all years\n\t\tsoefinding.findingContent[region].series2 = data.map(d => {\n\t\t\treturn {\n\t\t\t\tname: d[\"Clearing type\"].split(\" \"),\n\t\t\t\tdata: years.map(y => d[y])\n\t\t\t}\n\t\t})\n\n\t\tconst totalItem = {\n\t\t\tBioregion: region,\n\t\t\t\"Clearing type\": \"total\",\n\t\t}\n\t\tyears.forEach(y => totalItem[y] = 0)\n\t\tdata.forEach(d => {\n\t\t\tyears.forEach(y => {\n\t\t\t\ttotalItem[y] += d[y]\n\t\t\t})\n\t\t})\n\t\tsoefinding.findingContent[region].series3 = [{\n\t\t\tname: \"Hectares\",\n\t\t\tdata: years.map(y => totalItem[y])\n\t\t}]\n\n\t}\n\n\tconst options1 = soefinding.getDefaultPieChartOptions()\n\toptions1.chart.id = \"chart1\"\n\toptions1.labels = soefinding.findingContent[soefinding.state.currentRegionName].labels\n\toptions1.xaxis.categories = [\"Clearing type\", \"Hectares\"]\n\toptions1.tooltip = {\n\t\ty: {\n\t\t\tformatter: (val, options) => {\n\t\t\t\tconst percent = options.globals.seriesPercent[options.seriesIndex][0]\n\t\t\t\treturn `${val.toLocaleString()} ha. (${percent.toFixed(1)}%)`\n\t\t\t}\n\t\t}\n\t}\n\n\tsoefinding.state.chart1 = {\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series1,\n\t\toptions: options1,\n\t\tchartactive: true,\n\t}\n\n\n\tconst options2 = soefinding.getDefaultLineChartOptions()\n\toptions2.chart.id = \"chart2\"\n\toptions2.xaxis.categories = years.map(y => y.replace(\"-\", \"–\")) // en dash\n\toptions2.xaxis.title.text = \"Year\"\n\toptions2.yaxis.title.text = \"Hectares\"\n\toptions2.yaxis.labels.formatter = val => {\n\t\tif (val >= 1000000)\n\t\t\treturn `${val / 1000000}M`\n\t\tif (val >= 1000)\n\t\t\treturn `${val / 1000}K`\n\t\treturn val\n\t}\n\toptions2.tooltip.y = { formatter: val => `${val.toLocaleString()} ha.` }\n\n\tsoefinding.state.chart2 = {\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\n\t\toptions: options2,\n\t\tchartactive: true,\n\t}\n\n\tsoefinding.state.chart3 = {\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series3,\n\t\toptions: options2, // reüse\n\t\tchartactive: true,\n\t}\n\n\n\tnew Vue({\n\t\tel: \"#chartContainer\",\n\t\tdata: soefinding.state,\n\t\tcomputed: {\n\t\t\theading1: () => {\n\t\t\t\tlet retVal = `Proportion of replacement landcover (clearing type) in threatened ${soefinding.biota} habitat`\n\t\t\t\tif (soefinding.state.currentRegionName != \"Queensland\") {\n\t\t\t\t\tretVal += \" in \"\n\t\t\t\t\tif (!soefinding.state.currentRegionName.startsWith(\"South\") && !soefinding.state.currentRegionName.startsWith(\"Cape\"))\n\t\t\t\t\t\tretVal += \" the \"\n\t\t\t\t\tretVal += `${soefinding.state.currentRegionName}`\n\t\t\t\t}\n\t\t\t\tretVal += `, ${latest.replace(\"-\", \"–\")}` // en dash\n\t\t\t\treturn retVal\n\t\t\t},\n\t\t\theading2: () => {\n\t\t\t\tlet retVal = `Trends in replacement landcover (clearing type) in threatened ${soefinding.biota} habitat`\n\t\t\t\tif (soefinding.state.currentRegionName != \"Queensland\") {\n\t\t\t\t\tretVal += \" in \"\n\t\t\t\t\tif (!soefinding.state.currentRegionName.includes(\"Queensland\"))\n\t\t\t\t\t\tretVal += \" the \"\n\t\t\t\t\tretVal += `${soefinding.state.currentRegionName}`\n\t\t\t\t}\n\t\t\t\tretVal += `, ${latest.replace(\"-\", \"–\")}` // en dash\n\t\t\t\treturn retVal\n\t\t\t},\n\t\t\theading3: () => {\n\t\t\t\tlet retVal = `Trend in total replacement landcover (clearing type) in threatened ${soefinding.biota} habitat`\n\t\t\t\tif (soefinding.state.currentRegionName != \"Queensland\") {\n\t\t\t\t\tretVal += \" in \"\n\t\t\t\t\tif (!soefinding.state.currentRegionName.includes(\"Queensland\"))\n\t\t\t\t\t\tretVal += \" the \"\n\t\t\t\t\tretVal += `${soefinding.state.currentRegionName}`\n\t\t\t\t}\n\t\t\t\tretVal += `, ${latest.replace(\"-\", \"–\")}` // en dash\n\t\t\t\treturn retVal\n\t\t\t},\n\t\t},\n\t\tmethods: {\n\t\t\tformatter1: val => val.toLocaleString()\n\t\t}\n\t})\n\n\n\twindow.soefinding.onRegionChange = function () {\n\n\t\tsoefinding.state.chart1.series = this.findingContent[this.state.currentRegionName].series1\n\t\t//ApexCharts.exec(\"chart1\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series1)\n\t\tsoefinding.state.chart1.options.labels = this.findingContent[this.state.currentRegionName].labels\n\t\t//ApexCharts.exec(\"chart1\", \"updateOptions\", {\n\t\t//\tlabels: this.findingContent[this.state.currentRegionName].labels\n\t\t//}, true)\n\n\t\tsoefinding.state.chart2.series = this.findingContent[this.state.currentRegionName].series2\n\n\t\tsoefinding.state.chart3.series = this.findingContent[this.state.currentRegionName].series3\n\n\t\tsoefinding.loadFindingHtml();\n\t}\n\n})"],"mappings":"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","names":[]}
{"version":3,"sources":["../../../src/biodiversity/species-habitat/threatened-species-habitat.js"],"sourcesContent":["// used by fauna and flora\n\n\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n\tconst yearKeys = soefinding.findingJson.meta.fields.slice(3)\n\tconst latestYear = yearKeys.at(-1)\n\n\tconst regions = {}\n\tsoefinding.findingJson.data.forEach(d => {\n\t\tif (! regions[d.Region] ) \n\t\t\tregions[d.Region] = []\n\n\t\td.Remnant = d[latestYear]\n\t\td[\"Non-remnant\"] = d[\"Pre-clear\"] - d.Remnant\n\t\tregions[d.Region].push(d)\n\t})\n\n\tconst speciesNames = regions.Queensland.map(d => d.Group) \n\n\tconst series1Keys = [\"Pre-clear\", \"Remnant\"]\n\tfor(let region in regions) {\n\t\tsoefinding.findingContent[region] = {series1: series1Keys.map(k => {\n\t\t\treturn {\n\t\t\t\tname: k,\n\t\t\t\tdata: regions[region].map(d => d[k])\n\t\t\t}\n\t\t})\n\t}}\n\t\n\tfunction justify(s) {\n\t\tconst a = s.split(\" \")\n\t\tconst ret = [a.shift()]\n\t\twhile (a.length > 0) {\n\t\t\tif (ret[ret.length-1].length + a[0].length < 15)\n\t\t\t\tret[ret.length-1] += \" \" + a.shift()\n\t\t\telse\n\t\t\t\tret.push(a.shift())\n\t\t}\n\t\treturn ret\n\t}\n\n\tconst options1 = soefinding.getDefaultColumnChartOptions()\n\toptions1.chart.id = \"chart1\"\n\toptions1.xaxis.categories = speciesNames.map(n => justify(n))\n\toptions1.xaxis.title.text =  `F${soefinding.biota.slice(1)} Group`\n\toptions1.yaxis.title.text = \"Hectares\"\n\toptions1.yaxis.labels.formatter = val => {\n\t\tif ( val >= 1000000 )\n\t\t\treturn `${val/1000000}M` \n\t\telse if (val >= 1000) \n\t\t\treturn `${val/1000}K`\n\t\telse\n\t\t\treturn val\n\t}\n\toptions1.tooltip.y = { formatter: val => `${val.toLocaleString()} ha` }\n\n\tsoefinding.state.chart1 = {\n\t\toptions: options1,\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series1,\n\t\tchartactive: true,\n\t}\n\n\n\t\n\t// chart 2  a stacked column percent chart\n\tconst series2Keys = [\"Remnant\", \"Non-remnant\"]\n\tfor(let region in regions) {\n\t\tsoefinding.findingContent[region].series2 = series2Keys.map(k => {\n\t\t\treturn {\n\t\t\t\tname: k,\n\t\t\t\tdata: regions[region].map(d => d[k])\n\t\t\t}\n\t\t})\n\t}\n\n\n\tconst options2 = soefinding.getPercentStackedBarChartOptions()\n\toptions2.chart.id = \"chart2\"\n\toptions2.xaxis.categories = speciesNames.map(n => justify(n))\n\toptions2.xaxis.title.text =  `F${soefinding.biota.slice(1)} Group`\n\toptions2.yaxis.title.text = \"Proportion\"\n\toptions2.tooltip.y = { formatter: val => `${val.toLocaleString()}  ha.` } //todo\n\tdelete options2.yaxis.forceNiceScale\n\n\tsoefinding.state.chart2 = {\n\t\toptions: options2,\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\n\t\tchartactive: true,\n\t}\n\n\t// create the species items for checkbox list and series 3 data\n\tsoefinding.state.species = {}\n\tspeciesNames.forEach((s, i) => { \n\t\tsoefinding.state.species[s] = {\n\t\t\tchecked: i == 0,\n\t\t\tname: s,\n\t\t\tchart3active: true,\n\t\t\tchart4active: true,\n\t\t\tregions: {},\n\t\t\tnullSeries: false\n\t\t}\n\t\tfor(let region in regions) {\n\t\t\tconst item = regions[region].find(d => d.Group == s)\n\t\t\tsoefinding.state.species[s].regions[region] = { \n\t\t\t\tisSeries3Null: false, // some have all 0 for data, so we show just the table if that happens\n\t\t\t\tseries3: [{\n\t\t\t\t\tname: \"Habitat\",\n\t\t\t\t\tdata: yearKeys.map(y => item[y])\n\t\t\t\t}]\n\t\t\t}\n\t\t\tif (soefinding.state.species[s].regions[region].series3[0].data.every(d => d == 0))\n\t\t\t\tsoefinding.state.species[s].regions[region].isSeries3Null = true\n\t\t}\n\t})\n\n\n\t//options for chart 3 in the species list\n\tconst options3 = soefinding.getDefaultLineChartOptions()\n\toptions3.chart.id = \"chart3\"\n\toptions3.xaxis.categories = yearKeys\n\toptions3.xaxis.title.text = \"Year\"\n\toptions3.yaxis.title.text = \"Hectares\"\n\toptions3.yaxis.labels.formatter = options1.yaxis.labels.formatter\n\toptions3.yaxis.showForNullSeries = false\n\toptions3.tooltip.y = { formatter: options1.tooltip.y.formatter }\n\tsoefinding.state.options3 = options3\n\n\n\t// chart 4 is a pie chart for qld only\n\tspeciesNames.forEach(s => {\n\t\tsoefinding.state.species[s].regions.Queensland.series4 = soefinding.findingJson.data\n\t\t\t\t.filter(d => d.Group == s && d.Region != \"Queensland\")\n\t\t\t\t.map(d => d[\"Pre-clear\"])\n\t})\n\n\tsoefinding.state.options4 = soefinding.getDefaultPieChartOptions()\n\tsoefinding.state.options4.labels = Object.keys(regions).slice(1)\n\tsoefinding.state.options4.tooltip = { y: { formatter: (val, options) => {\n\t\tconst percent = options.globals.seriesPercent[options.seriesIndex][0]\n\t\treturn `${val.toLocaleString()} ha (${percent.toFixed(1)}%)`\n\t}}}\n\tsoefinding.state.options4.xaxis.categories = [\"Region\", \"Pre-clear (ha)\"]\n\n\n\n\tnew Vue({\n\t\tel: \"#chartContainer\",\n\t\tdata: soefinding.state,\n\t\tcomputed: {\n\t\t\theading1: function () { return `Area of ${this.currentRegionName} pre-clear threatened ${soefinding.biota} habitat and ${latestYear} remnant habitat by species group` },\n\t\t\theading2: function () { return `Proportion of ${this.currentRegionName} pre-clear threatened ${soefinding.biota} habitat that is remnant and non-remnant habitat, ${latestYear}` },\n\t\t\theading4: function () { return `Proportion of pre-clear threatened ${this.currentSpecies} habitat by bioregion` }\n\t\t},\n\t\tmethods: {\n\t\t\tformatter1: val => val.toLocaleString()\n\t\t}\n\t});\n\n\n\twindow.soefinding.onRegionChange = function () {\n\n\t\t// set the data series in each of the vue apps, for the current region\n\t\tsoefinding.state.chart1.series = this.findingContent[this.state.currentRegionName].series1\n\t\tApexCharts.exec(\"chart1\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series1)\n\n\t\tsoefinding.state.chart2.series = this.findingContent[this.state.currentRegionName].series2\n\t\tApexCharts.exec(\"chart2\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series2)\n\n\n\n\t\tsoefinding.loadFindingHtml();\n\t}\n\n\n})"],"mappings":"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","names":[]}
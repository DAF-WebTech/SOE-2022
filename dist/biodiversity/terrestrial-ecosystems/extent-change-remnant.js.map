{"version":3,"sources":["../../../src/biodiversity/terrestrial-ecosystems/extent-change-remnant.js"],"sourcesContent":["\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n\tconst years = soefinding.findingJson.meta.fields.slice(4);\r\n\tconst latestYear = years.at(-1)\r\n\r\n\t// sort data by latest year\r\n\tsoefinding.findingJson.data.sort(function (a, b) {\r\n\t\treturn b[latestYear] - a[latestYear]\r\n\t})\r\n\r\n\tconst bioregions = {}\r\n\tconst qldData = [] // we need to populate a qld item as we go\r\n\tsoefinding.findingJson.data.forEach(d => {\r\n\t\t// fix up the group label\r\n\t\td[\"Broad vegetation group label\"] = `${d[\"Broad vegetation group number\"]}. ${d[\"Broad vegetation group label\"].replace(\"-\", \"—\")}` //mdash\r\n\r\n\t\t// group by bioregion\r\n\t\tif (!bioregions[d.Bioregion]) {\r\n\t\t\tbioregions[d.Bioregion] = []\r\n\t\t}\r\n\t\tbioregions[d.Bioregion].push(d)\r\n\r\n\t\tlet qldGroup = qldData.find(q => q[\"Broad vegetation group label\"] == d[\"Broad vegetation group label\"])\r\n\t\tif (!qldGroup) {\r\n\t\t\tqldGroup = {\r\n\t\t\t\t\"Broad vegetation group label\": d[\"Broad vegetation group label\"],\r\n\t\t\t\t[latestYear]: 0\r\n\t\t\t}\r\n\t\t\tqldData.push(qldGroup)\r\n\t\t}\r\n\t\tqldGroup[latestYear] += d[latestYear]\r\n\t})\r\n\r\n\t// set our chart data for each region\r\n\tfor (const bioregion in bioregions) {\r\n\t\tsoefinding.findingContent[bioregion] = {\r\n\t\t\tseries1: bioregions[bioregion].map(d => {\r\n\t\t\t\t// as a side effect populate qld value\r\n\t\t\t\treturn d[latestYear]\r\n\t\t\t}),\r\n\t\t\tlabels1: bioregions[bioregion].map(d => d[\"Broad vegetation group label\"])\r\n\t\t}\r\n\t}\r\n\t// set chart date for qld, but first needs sorting\r\n\tqldData.sort(function (a, b) {\r\n\t\treturn b[latestYear] - a[latestYear]\r\n\t})\r\n\tsoefinding.findingContent.Queensland = {\r\n\t\tseries1: qldData.map(d => d[latestYear]),\r\n\t\tlabels1: qldData.map(d => d[\"Broad vegetation group label\"]) // or could be keys of bioregions\r\n\t}\r\n\r\n\tconst options1 = soefinding.getDefaultPieChartOptions()\r\n\toptions1.chart.id = \"chart1\"\r\n\toptions1.labels = soefinding.findingContent[soefinding.state.currentRegionName].labels1\r\n\toptions1.tooltip = {\r\n\t\ty: {\r\n\t\t\tformatter: (val, options) => {\r\n\t\t\t\tconst percent = options.globals.seriesPercent[options.seriesIndex][0]\r\n\t\t\t\treturn `${val.toLocaleString()} ha. (${percent.toFixed(1)}%)`\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\toptions1.xaxis.categories = [\"Broad vegetation group\", \"Hectares\"] // these are the table headings\r\n\r\n\r\n\tsoefinding.state.chart1 = {\r\n\t\toptions: options1,\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series1,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// chart 2, column chart for each region, not displayed for qld\r\n\tconst seriesNames = [\"Pre-clear vegetation\", latestYear]\r\n\tfor (const bioregion in bioregions) {\r\n\t\tbioregions[bioregion].sort(function (a, b) {\r\n\t\t\treturn a[\"Broad vegetation group number\"] - b[\"Broad vegetation group number\"]\r\n\t\t})\r\n\t\tsoefinding.findingContent[bioregion].series2 = seriesNames.map(s => {\r\n\t\t\treturn {\r\n\t\t\t\tname: s,\r\n\t\t\t\tdata: bioregions[bioregion].map(d => d[s])\r\n\t\t\t}\r\n\t\t})\r\n\t\tsoefinding.findingContent[bioregion].labels2 = bioregions[bioregion].map(d => d[\"Broad vegetation group label\"])\r\n\t}\r\n\tsoefinding.findingContent.Queensland.series2 = soefinding.findingContent[\"Wet Tropics\"].series2 // won't be seen but needs a default\r\n\tsoefinding.findingContent.Queensland.labels2 = soefinding.findingContent[\"Wet Tropics\"].labels2 // won't be seen but needs a default\r\n\r\n\tconst options2 = soefinding.getDefaultColumnChartOptions()\r\n\toptions2.chart.id = \"chart2\"\r\n\toptions2.tooltip.y = { formatter: val => `${val.toLocaleString()}ha` }\r\n\toptions2.xaxis.categories = soefinding.findingContent[soefinding.state.currentRegionName].labels2\r\n\toptions2.xaxis.labels.trim = true,\r\n\t\toptions2.xaxis.labels.hideOverlappingLabels = false\r\n\r\n\r\n\toptions2.xaxis.tickPlacement = \"between\" // not a good option, but it fixes a bug\r\n\t// where the chart xaxis did not redraw correctly when a) swapping between regions. and then b) clicking one of the legends\r\n\toptions2.xaxis.title.text = \"Broad Vegetation Group\"\r\n\toptions2.yaxis.labels.formatter = val => `${val / 1000000}M`\r\n\toptions2.yaxis.title.text = \"Hectares\"\r\n\r\n\tsoefinding.state.chart2 = {\r\n\t\toptions: options2,\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\t// third chart, stacked column for each region and qld\r\n\tconst data3 = JSON.parse(document.getElementById(\"jsonData3\").textContent) // data for chart 3\r\n\tconst keys = data3.meta.fields.slice(3)\r\n\tconst lastKey = keys.at(-1)\r\n\r\n\tconst qldItem3 = {}\r\n\tfor (let bioregion in bioregions) { // assume same bioregions as what we had in data file 1\r\n\t\tconst regionData = data3.data.filter(d => d.Bioregion == bioregion)\r\n\t\tsoefinding.findingContent[bioregion].series3 = regionData.map(d => {\r\n\t\t\t// as a side effect, populate the qld item\r\n\t\t\tconst name = `${d[\"Broad vegetation group number\"]}. ${d[\"Broad vegetation group label\"]}`\r\n\t\t\tif (!qldItem3[name])\r\n\t\t\t\tqldItem3[name] = keys.map(k => 0)\r\n\t\t\tqldItem3[name].forEach((q, i) => qldItem3[name][i] += d[keys[i]])\r\n\r\n\t\t\treturn {\r\n\t\t\t\tname,\r\n\t\t\t\tdata: keys.map(k => d[k])\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\tsoefinding.findingContent.Queensland.series3 = Object.keys(qldItem3).map(q => {\r\n\t\treturn {\r\n\t\t\tname: q.replace(\"-\", \"—\"), //emdash\r\n\t\t\tdata: qldItem3[q]\r\n\t\t}\r\n\t})\r\n\tsoefinding.findingContent.Queensland.series3.sort(function (a, b) {\r\n\t\treturn parseInt(a.name.substring(0, a.name.indexOf(\".\"))) - parseInt(b.name.substring(0, b.name.indexOf(\".\")))\r\n\t})\r\n\r\n\tconst options3 = soefinding.getDefaultStackedColumnChartOptions()\r\n\toptions3.chart.height = 600\r\n\toptions3.chart.id = \"chart3\"\r\n\toptions3.legend.inverseOrder = false\r\n\toptions3.legend.offsetY = 20\r\n\toptions3.legend.position = \"bottom\"\r\n\toptions3.tooltip.y = { formatter: val => val.toLocaleString() }\r\n\toptions3.xaxis.categories = keys.map(k => [k.substring(0, k.indexOf(\"-\")) + \"–\", k.substring(k.indexOf(\"-\") + 1)])  //endash\r\n\tdelete options3.xaxis.tickPlacement\r\n\toptions3.xaxis.title.text = \"Year\"\r\n\toptions3.yaxis.labels.formatter = val => val >= 1000000 ? `${val / 1000000}M` : `${val / 1000}k`\r\n\toptions3.yaxis.labels.minWidth = 30\r\n\toptions3.yaxis.title.text = \"Hectares lost\"\r\n\toptions3.tooltip.shared = false\r\n\r\n\r\n\r\n\tsoefinding.state.chart3 = {\r\n\t\toptions: options3,\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series3,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\tnew Vue({\r\n\t\tel: \"#chartContainer\",\r\n\t\tdata: soefinding.state,\r\n\t\tcomputed: {\r\n\t\t\theading1: () => `Proportion of broad vegetation groups in ${soefinding.state.currentRegionName}, ${latestYear}`,\r\n\t\t\theading2: () => `Pre-clear and ${latestYear} extents of broad vegetation groups in ${soefinding.state.currentRegionName}`,\r\n\t\t\theading3: function () {\r\n\t\t\t\tlet retVal = \"Change in extent of broad vegetation groups\"\r\n\t\t\t\tif (this.currentRegionName != \"Queensland\")\r\n\t\t\t\t\tretVal += ` in ${this.currentRegionName}`\r\n\t\t\t\treturn retVal\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tformatter1: val => val.toLocaleString(),\r\n\t\t\tonStackedRadioClick: function () {\r\n\t\t\t\tthis.chart3.options.chart.type = \"bar\"\r\n\t\t\t\tthis.chart3.options.chart.stacked = true\r\n\t\t\t},\r\n\t\t\tonLineRadioClick: function () {\r\n\t\t\t\tthis.chart3.options.chart.type = \"line\"\r\n\t\t\t\tthis.chart3.options.chart.stacked = false\r\n\t\t\t\tthis.chart3.options.markers = { size: 4 } // ignored by column chart\r\n\t\t\t\tthis.chart3.options.tooltip.shared = false\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\twindow.soefinding.onRegionChange = function () {\r\n\t\t// set the data series in each of the vue apps, for the current region\r\n\r\n\t\t// chart 1\r\n\t\tsoefinding.state.chart1.series = this.findingContent[this.state.currentRegionName].series1\r\n\t\t// this works on the table\r\n\t\tsoefinding.state.chart1.options.labels = this.findingContent[this.state.currentRegionName].labels1\r\n\t\t// but we also need this for the chart to update\r\n\t\tApexCharts.exec(\"chart1\", \"updateOptions\", {\r\n\t\t\tlabels: this.findingContent[this.state.currentRegionName].labels1,\r\n\t\t})\r\n\r\n\t\t// chart 2\r\n\t\tif (this.state.currentRegionName != \"Queensland\") {\r\n\t\t\tsoefinding.state.chart2.series = this.findingContent[this.state.currentRegionName].series2\r\n\t\t\t// this works on the table\r\n\t\t\tsoefinding.state.chart2.options.xaxis.categories = this.findingContent[this.state.currentRegionName].labels2\r\n\t\t\t// but we also need this for the chart to update\r\n\t\t\tApexCharts.exec(\"chart2\", \"updateOptions\", {\r\n\t\t\t\txaxis: { categories: this.findingContent[this.state.currentRegionName].labels2 }\r\n\t\t\t}\r\n\t\t\t)\r\n\t\t}\r\n\r\n\t\t// chart 3\r\n\t\tsoefinding.state.chart3.series = this.findingContent[this.state.currentRegionName].series3\r\n\t\t// \t\t// this works on the table\r\n\t\t// \t\tsoefinding.state.chart3.options.xaxis.categories = this.findingContent[this.state.currentRegionName].labels3\r\n\t\t// \t\t// but we also need this for the chart to update\r\n\t\t// \t\tApexCharts.exec(\"chart3\", \"updateOptions\", {\r\n\t\t// \t\t\txaxis: {categories: this.findingContent[this.state.currentRegionName].labels3}}\r\n\t\t// \t\t)\r\n\r\n\r\n\t\tsoefinding.loadFindingHtml();\r\n\t}\r\n\r\n\r\n})"],"mappings":"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","names":[]}
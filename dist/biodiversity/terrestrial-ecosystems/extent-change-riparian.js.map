{"version":3,"sources":["../../../src/biodiversity/terrestrial-ecosystems/extent-change-riparian.js"],"sourcesContent":["\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n\tconst catchments = soefinding.findingJson.data.filter(d => d.Catchment == d.Subcatchment)\r\n\tconst series1Keys = soefinding.findingJson.meta.fields.filter(f => f.includes(\"Woody Vegetation Loss per cent\"))\r\n\tsoefinding.findingContent.Queensland = { series1: null, subcatchments: null}\r\n\r\n\tcatchments.forEach(d => {\r\n\t\tsoefinding.findingContent[d.Catchment] = { \r\n\t\t\tseries1: [{\r\n\t\t\t\tname: d.Catchment,\r\n\t\t\t\tdata: series1Keys.map(k => d[k])\r\n\t\t\t}]\r\n\t\t}\r\n\r\n\t\t// set up the subcatchments checkboxes\r\n\t\tconst subcatchments = soefinding.findingJson.data.filter(c => c.Catchment == d.Catchment && c.Subcatchment != d.Subcatchment)\r\n\t\tsubcatchments.forEach((sc, i) => {\r\n\t\t\tsc.checked = i == 0\r\n\t\t\tsc.chartactive = true\r\n\t\t\tsc.series = [{\r\n\t\t\t\tname: sc.Subcatchment,\r\n\t\t\t\tdata: series1Keys.map(k => sc[k])\r\n\t\t\t}]\r\n\t\t})\r\n\t\tsoefinding.findingContent[d.Catchment].subcatchments = subcatchments\r\n\t})\r\n\r\n\tconst options1 = soefinding.getDefaultLineChartOptions()\r\n\toptions1.xaxis.title = \"Year\"\r\n\toptions1.xaxis.categories = series1Keys.map(k => k.replace(\"_\", \"â€“\").split(\" \")[0]) // ndash for year range\r\n\toptions1.xaxis.tickPlacement = \"between\"\r\n\toptions1.yaxis.title = \"Percent (%)\"\r\n\toptions1.yaxis.labels.formatter = val => val.toFixed(1)\r\n\toptions1.tooltip.y = { formatter: val => `${val}%` } \r\n\toptions1.yaxis.forceNicScale = false\r\n\toptions1.yaxis.min = 0\r\n\r\n\r\n\tsoefinding.state.chart1 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series1,\r\n\t\toptions: options1,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\t// set subcatchments for current region\r\n\tsoefinding.state.subcatchments = soefinding.findingContent[soefinding.state.currentRegionName].subcatchments\r\n\r\n\r\n\tnew Vue({\r\n\t\tel: \"#chartContainer\",\r\n\t\tdata: soefinding.state,\r\n\t\tcomputed: {\r\n\t\t\theading1: function()  { return `Loss of riparian woody vegetation in ${this.currentRegionName}` },\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tformatter1: val => val.toLocaleString()\r\n\t\t}\r\n\t})\r\n\r\n\r\n\r\n\r\n\twindow.soefinding.onRegionChange = function () {\r\n\t\tif (this.state.currentRegionName != \"Queensland\") {\r\n\t\t\tsoefinding.state.chart1.series = this.findingContent[this.state.currentRegionName].series1\r\n\t\t\tsoefinding.state.subcatchments = this.findingContent[this.state.currentRegionName].subcatchments\r\n\t\t}\r\n\t}\r\n\r\n})\r\n\r\n"],"mappings":"aAEA,SAAS,iBAAiB,mBAAoB,UAAY,CAEzD,KAAM,YAAa,WAAW,YAAY,KAAK,OAAO,GAAK,EAAE,WAAa,EAAE,cAC5E,KAAM,aAAc,WAAW,YAAY,KAAK,OAAO,OAAO,GAAK,EAAE,SAAS,mCAC9E,WAAW,eAAe,WAAa,CAAE,QAAS,KAAM,cAAe,MAEvE,WAAW,QAAQ,GAAK,CACvB,WAAW,eAAe,EAAE,WAAa,CACxC,QAAS,CAAC,CACT,KAAM,EAAE,UACR,KAAM,YAAY,IAAI,GAAK,EAAE,OAK/B,KAAM,eAAgB,WAAW,YAAY,KAAK,OAAO,GAAK,EAAE,WAAa,EAAE,WAAa,EAAE,cAAgB,EAAE,cAChH,cAAc,QAAQ,CAAC,GAAI,IAAM,CAChC,GAAG,QAAU,GAAK,EAClB,GAAG,YAAc,KACjB,GAAG,OAAS,CAAC,CACZ,KAAM,GAAG,aACT,KAAM,YAAY,IAAI,GAAK,GAAG,QAGhC,WAAW,eAAe,EAAE,WAAW,cAAgB,gBAGxD,KAAM,UAAW,WAAW,6BAC5B,SAAS,MAAM,MAAQ,OACvB,SAAS,MAAM,WAAa,YAAY,IAAI,GAAK,EAAE,QAAQ,IAAK,UAAK,MAAM,KAAK,IAChF,SAAS,MAAM,cAAgB,UAC/B,SAAS,MAAM,MAAQ,cACvB,SAAS,MAAM,OAAO,UAAY,KAAO,IAAI,QAAQ,GACrD,SAAS,QAAQ,EAAI,CAAE,UAAW,KAAO,GAAG,QAC5C,SAAS,MAAM,cAAgB,MAC/B,SAAS,MAAM,IAAM,EAGrB,WAAW,MAAM,OAAS,CACzB,OAAQ,WAAW,eAAe,WAAW,MAAM,mBAAmB,QACtE,QAAS,SACT,YAAa,MAId,WAAW,MAAM,cAAgB,WAAW,eAAe,WAAW,MAAM,mBAAmB,cAG/F,GAAI,KAAI,CACP,GAAI,kBACJ,KAAM,WAAW,MACjB,SAAU,CACT,SAAU,UAAY,CAAE,MAAO,wCAAwC,KAAK,sBAE7E,QAAS,CACR,WAAY,KAAO,IAAI,oBAOzB,OAAO,WAAW,eAAiB,UAAY,CAC9C,GAAI,KAAK,MAAM,mBAAqB,aAAc,CACjD,WAAW,MAAM,OAAO,OAAS,KAAK,eAAe,KAAK,MAAM,mBAAmB,QACnF,WAAW,MAAM,cAAgB,KAAK,eAAe,KAAK,MAAM,mBAAmB","names":[]}
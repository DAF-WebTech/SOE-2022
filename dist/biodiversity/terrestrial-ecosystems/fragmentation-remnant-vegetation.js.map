{"version":3,"sources":["../../../src/biodiversity/terrestrial-ecosystems/fragmentation-remnant-vegetation.js"],"sourcesContent":["\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n\tconst series1items = soefinding.findingJson.data.filter(d => d.Figure == 1)\n\tconst seriesFields = soefinding.findingJson.meta.fields.slice(-3)\n\tconst series1Labels = [\"Patch value (%)\", \"Edge value (%)\", \"Core value (%)\"]\n\tconst years = new Set()\n\tseries1items.forEach(d => {\n\t\tyears.add(d.YEAR)\n\n\t\tif (!soefinding.findingContent[d.REGPage])\n\t\t\tsoefinding.findingContent[d.REGPage] = {\n\t\t\t\tseries1: series1Labels.map(l => { return { name: l, data: [] } })\n\t\t\t}\n\n\t\tseriesFields.forEach((f, i) => soefinding.findingContent[d.REGPage].series1[i].data.push(d[f]))\n\t})\n\n\tconst options1 = soefinding.getDefaultColumnChartOptions()\n\toptions1.tooltip.y = { formatter: val => val.toFixed(4) }\n\toptions1.xaxis.categories = Array.from(years).map(y => [y.substring(0, y.lastIndexOf(\" \")), y.substring(y.lastIndexOf(\" \") + 1)])\n\toptions1.xaxis.title.text = \"Year\"\n\toptions1.yaxis.labels.formatter = val => Math.round(val)\n\toptions1.yaxis.title.text = \"Percent\"\n\n\tsoefinding.state.chart1 = {\n\t\toptions: options1,\n\t\tseries: soefinding.findingContent.Queensland.series1,\n\t\tchartactive: true,\n\t}\n\n\n\t// chart 2\n\tconst series2Labels = [\"Patch value (count)\", \"Edge value (count)\", \"Core value (count)\"]\n\tconst series2items = soefinding.findingJson.data.filter(d => d.Figure == 2)\n\tseries2items.sort(function (a, b) {\n\t\treturn a.RegName >= b.RegName ? 1 : -1\n\t})\n\tconst series2year = series2items[0].YEAR\n\tseries2items.forEach(d => {\n\t\tif (!soefinding.findingContent[d.REGPage].series2)\n\t\t\tsoefinding.findingContent[d.REGPage].series2 = series2Labels.map(l => { return { name: l, data: [] } })\n\n\t\tseriesFields.forEach((f, i) => soefinding.findingContent[d.REGPage].series2[i].data.push(d[f]))\n\n\t\tif (!soefinding.findingContent[d.REGPage].subregions)\n\t\t\tsoefinding.findingContent[d.REGPage].subregions = []\n\t\tsoefinding.findingContent[d.REGPage].subregions.push(d.RegName)\n\t})\n\n\tconst options2 = JSON.parse(JSON.stringify(options1))\n\toptions2.chart.height = 500\n\toptions2.chart.id = \"chart2\"\n\toptions2.tooltip.y.formatter = val => `${val < 0 ? '−' : ''}${Math.abs(val).toFixed(2)}`, // a better minus sign\n\t\toptions2.xaxis.categories = soefinding.findingContent[soefinding.state.currentRegionName].subregions\n\toptions2.xaxis.labels.trim = soefinding.state.currentRegionName == \"Brigalow Belt\"\n\toptions2.xaxis.labels.hideOverlappingLabels = false\n\toptions2.xaxis.title.text = \"Region\"\n\toptions2.yaxis.labels.formatter = (val) => {  // a better minus sign\n\t\tif (val > 0)\n\t\t\treturn `${val < 0 ? '−' : ''}${Math.abs(val).toFixed(2)}`\n\t\telse\n\t\t\treturn `${val < 0 ? '−' : ''}${Math.abs(val)}`\n\t},\n\t\toptions2.yaxis.title.text = \"Count per 100km²\"\n\n\toptions2.xaxis.tickPlacement = \"between\" // not a good option, but it fixes a bug\n\t// where the chart xaxis did not redraw correctly when swapping between regions.,\n\t// and then you click on one of the legends\n\n\tsoefinding.state.chart2 = {\n\t\toptions: options2,\n\t\tseries: soefinding.findingContent.Queensland.series2,\n\t\tchartactive: true,\n\t}\n\n\n\t// chart 3\n\tconst series3Labels = [\"Patch value (count per 100km²)\", \"Edge value (count per 100km²)\", \"Core value (count per 100km²)\"]\n\tconst series3items = soefinding.findingJson.data.filter(d => d.Figure == 3)\n\tconst series3year = series3items[0].YEAR\n\tseries3items.forEach(d => {\n\t\tif (!soefinding.findingContent[d.REGPage].series3)\n\t\t\tsoefinding.findingContent[d.REGPage].series3 = series3Labels.map(l => { return { name: l, data: [] } })\n\n\t\tseriesFields.forEach((f, i) => soefinding.findingContent[d.REGPage].series3[i].data.push(d[f]))\n\n\t})\n\n\n\n\tconst options3 = JSON.parse(JSON.stringify(options2))\n\toptions3.chart.id = \"chart3\"\n\toptions3.tooltip.y.formatter = val => `${val < 0 ? '−' : ''}${Math.abs(val)}`, // a better minus sign\n\t\toptions3.xaxis.categories = soefinding.findingContent[soefinding.state.currentRegionName].subregions\n\toptions3.yaxis.labels.formatter = options1.yaxis.labels.formatter\n\toptions3.yaxis.title.text = \"Count\"\n\n\toptions3.xaxis.tickPlacement = \"between\" // not a good option, but it fixes a bug\n\t// where the chart xaxis did not redraw correctly when swapping between regions.,\n\t// and then you click on one of the legends\n\n\tsoefinding.state.chart3 = {\n\t\toptions: options3,\n\t\tseries: soefinding.findingContent.Queensland.series3,\n\t\tchartactive: true,\n\t}\n\n\n\n\n\tnew Vue({\n\t\tel: \"#chartContainer\",\n\t\tdata: soefinding.state,\n\t\tcomputed: {\n\t\t\theading1: () => {\n\t\t\t\tlet title = \"Percent change in the number of fragmentation classes from previous reporting period\"\n\t\t\t\tif (soefinding.state.currentRegionName != \"Queensland\")\n\t\t\t\t\ttitle += ` in ${soefinding.state.currentRegionName}`\n\t\t\t\treturn title\n\t\t\t},\n\t\t\theading2: () => {\n\t\t\t\tlet title = \"Density change of fragmentation classes per 1000km²\"\n\t\t\t\tif (soefinding.state.currentRegionName == \"Queensland\")\n\t\t\t\t\ttitle += \" by region\"\n\t\t\t\telse\n\t\t\t\t\ttitle += ` in ${soefinding.state.currentRegionName}`\n\t\t\t\ttitle += `, ${series2year}`\n\t\t\t\treturn title\n\t\t\t},\n\t\t\theading3: () => {\n\t\t\t\tlet title = \"Change in the number of fragmentation classes\"\n\t\t\t\tif (soefinding.state.currentRegionName == \"Queensland\")\n\t\t\t\t\ttitle += \" by region\"\n\t\t\t\telse\n\t\t\t\t\ttitle += ` in ${soefinding.state.currentRegionName}`\n\t\t\t\ttitle += `, ${series3year}`\n\t\t\t\treturn title\n\t\t\t},\n\t\t},\n\t\tmethods: {\n\t\t\tformatter1: val => `${val < 0 ? '−' : ''}${Math.abs(val).toFixed(4)}`,\n\t\t\tformatter2: val => `${val < 0 ? '−' : ''}${Math.abs(val).toFixed(2)}`,\n\t\t\tformatter3: val => `${val < 0 ? '−' : ''}${Math.abs(val)}`, // a better minus sign\n\t\t}\n\t})\n\n\n\twindow.soefinding.onRegionChange = function () {\n\t\t// set the data series in each of the vue apps, for the current region\n\n\t\t// chart 1\n\t\t// the exec function only seems necessary when the x-axis changes, but keeping it here for reference in case i’m wrong\n\t\t//ApexCharts.exec(\"chart1\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series1)\n\t\tsoefinding.state.chart1.series = this.findingContent[this.state.currentRegionName].series1\n\n\n\t\t// chart 2\n\t\t// the exec function only seems necessary when the x-axis changes, but keeping it here for reference in case i’m wrong\n\t\tApexCharts.exec(\"chart2\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series2)\n\t\tsoefinding.state.chart2.series = this.findingContent[this.state.currentRegionName].series2\n\t\tApexCharts.exec(\"chart2\", \"updateOptions\", {\n\t\t\txaxis: {\n\t\t\t\tcategories: this.findingContent[this.state.currentRegionName].subregions,\n\t\t\t\tlabels: { trim: soefinding.state.currentRegionName == \"Brigalow Belt\" }\n\t\t\t}\n\t\t})\n\t\toptions2.xaxis.categories = this.findingContent[this.state.currentRegionName].subregions\n\n\t\t//\n\n\t\t// chart 3\n\t\t// the exec function only seems necessary when the x-axis changes, but keeping it here for reference in case i’m wrong\n\t\tApexCharts.exec(\"chart3\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series3)\n\t\tsoefinding.state.chart3.series = this.findingContent[this.state.currentRegionName].series3\n\t\tApexCharts.exec(\"chart3\", \"updateOptions\", {\n\t\t\txaxis: {\n\t\t\t\tcategories: this.findingContent[this.state.currentRegionName].subregions,\n\t\t\t\tlabels: { trim: soefinding.state.currentRegionName == \"Brigalow Belt\" }\n\t\t\t}\n\t\t})\n\t\toptions3.xaxis.categories = this.findingContent[this.state.currentRegionName].subregions\n\n\n\t\tsoefinding.loadFindingHtml()\n\t}\n})"],"mappings":"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","names":[]}
{"version":3,"sources":["../../../src/biodiversity/terrestrial-ecosystems/land-clearing-impact.js"],"sourcesContent":["\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n\tlet yearKeys = soefinding.findingJson.meta.fields.slice(2)\n\n\tconst totalClearing = soefinding.findingJson.data.filter(d => d[\"Clearing type\"] == \"Total clearing\")\n\tsoefinding.findingContent.Queensland = {\n\t\tseries1: totalClearing.map(d => {\n\t\t\treturn {\n\t\t\t\tname: d.Bioregion,\n\t\t\t\tdata: yearKeys.map(y => d[y])\n\t\t\t}\n\t\t}),\n\t}\n\n\tconst options1 = soefinding.getDefaultStackedColumnChartOptions()\n\tdelete options1.xaxis.tickPlacement\n\toptions1.xaxis.categories = yearKeys.map(y => y.replace(\"-\", \"–\")) // en dash\n\toptions1.xaxis.title.text = \"Year range\"\n\toptions1.xaxis.labels.formatter = function(val) {\n\t\tif (typeof val != \"undefined\") {\n\t\t\tconst year = Number(val.split(\"–\")[1])\n\t\t\tconsole.log(val, year, year%2)\n\t\t\treturn year % 2 ? \"\" : val\n\t\t}\n\t}\n\toptions1.yaxis.labels.formatter = val => `${val / 1000}K`\n\toptions1.yaxis.title.text = \"Hectares per year\"\n\toptions1.tooltip.y = { formatter: val => val.toLocaleString() } \n\n\tsoefinding.state.chart1 = {\n\t\toptions: options1,\n\t\tseries: soefinding.findingContent.Queensland.series1,\n\t\tchartactive: true,\n\t}\n\n\n\n\tconst clearingTypes = [\"Pasture\", \"Crop\", \"Settlement\", \"Mining\", \"Infrastructure\", \"Forestry\"]\n\tconst clearingItems = soefinding.findingJson.data.filter(d => clearingTypes.includes(d[\"Clearing type\"]))\n\tsoefinding.findingContent.Queensland.series2 = clearingTypes.map(d => {\n\t\treturn {\n\t\t\tname: d,\n\t\t\tdata: yearKeys.map(y => 0)\n\t\t}\n\t})\n\tclearingItems.forEach(d => {\n\t\tif (!soefinding.findingContent[d.Bioregion])\n\t\t\tsoefinding.findingContent[d.Bioregion] = { series2: [] }\n\t\tsoefinding.findingContent[d.Bioregion].series2.push({\n\t\t\tname: d[\"Clearing type\"],\n\t\t\tdata: yearKeys.map(y => d[y])\n\t\t})\n\n\t\tconst qldItem = soefinding.findingContent.Queensland.series2.find(q => q.name == d[\"Clearing type\"])\n\t\tyearKeys.forEach((y, i) => {\n\t\t\tqldItem.data[i] += d[y]\n\t\t})\n\t})\n\n\tconst options2 = JSON.parse(JSON.stringify(options1))\n\toptions2.xaxis.labels.formatter = options1.xaxis.labels.formatter\n\toptions2.yaxis.labels.formatter = options1.yaxis.labels.formatter\n\toptions2.tooltip.y.formatter = options1.tooltip.y.formatter\n\n\tsoefinding.state.chart2 = {\n\t\toptions: options2,\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\n\t\tchartactive: true,\n\t}\n\n\n\tyearKeys = yearKeys.slice(10) // there's no data for the first 10 years,\n\t// but the algo here makes it hard to find them\n\tconst historicTypes = [\"Non-remnant\", \"Remnant\"]\n\tconst historicItems = soefinding.findingJson.data.filter(d => historicTypes.includes(d[\"Clearing type\"]))\n\tsoefinding.findingContent.Queensland.series3 = historicTypes.map(d => {\n\t\treturn {\n\t\t\tname: d,\n\t\t\tdata: yearKeys.map(y => 0)\n\t\t}\n\t})\n\thistoricItems.forEach(d => {\n\t\tif (!soefinding.findingContent[d.Bioregion].series3)\n\t\t\tsoefinding.findingContent[d.Bioregion].series3 = []\n\t\tsoefinding.findingContent[d.Bioregion].series3.push({\n\t\t\tname: d[\"Clearing type\"],\n\t\t\tdata: yearKeys.map(y => d[y])\n\t\t})\n\n\t\tconst qldItem = soefinding.findingContent.Queensland.series3.find(q => q.name == d[\"Clearing type\"])\n\t\tyearKeys.forEach((y, i) => {\n\t\t\tqldItem.data[i] += d[y]\n\t\t})\n\t})\n\n\tconst options3 = JSON.parse(JSON.stringify(options2))\n\toptions3.tooltip.y.formatter = options1.tooltip.y.formatter\n\toptions3.xaxis.categories = yearKeys\n\toptions3.yaxis.labels.formatter = options1.yaxis.labels.formatter\n\n\tsoefinding.state.chart3 = {\n\t\toptions: options3,\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series3,\n\t\tchartactive: true,\n\t}\n\n\n\n\n\tnew Vue({\n\t\tel: \"#chartContainer\",\n\t\tdata: soefinding.state,\n\t\tcomputed: {\n\t\t\theading1: () => `Proportion of total woody vegetation clearing, by bioregion`,\n\t\t\theading2: () => `Proportion of replacement landcover (clearing type) in ${soefinding.state.currentRegionName}`,\n\t\t\theading3: () => `Historic woody vegetation clearing in ${soefinding.state.currentRegionName}`,\n\t\t},\n\t\tmethods: {\n\t\t\tformatter1: val => val?.toLocaleString() ?? \"\"\n\t\t}\n\t})\n\n\n\n\twindow.soefinding.onRegionChange = function () {\n\t\t// set the data series in each of the vue apps, for the current region\n\n\t\t// chart 2\n\t\t// the exec function only seems necessary when the x-axis changes, but keeping it here for reference in case i’m wrong\n\t\t//ApexCharts.exec(\"chart2\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series2)\n\t\tsoefinding.state.chart2.series = this.findingContent[this.state.currentRegionName].series2\n\n\t\t// chart 3\n\t\t//ApexCharts.exec(\"chart3\", \"updateSeries\", this.findingContent[this.state.currentRegionName].series3)\n\t\tsoefinding.state.chart3.series = this.findingContent[this.state.currentRegionName].series3\n\n\n\t\tsoefinding.loadFindingHtml()\n\t}\n})"],"mappings":"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","names":[]}
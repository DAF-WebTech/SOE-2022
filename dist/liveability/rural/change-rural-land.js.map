{"version":3,"sources":["../../../src/liveability/rural/change-rural-land.js"],"sourcesContent":["\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n\tconst yearKeys = soefinding.findingJson.meta.fields.slice(3)\r\n\r\n\t// group by region name\r\n\tconst regions = new Map()\r\n\tsoefinding.regionNames.forEach(r => regions.set(r, []))\r\n\t\r\n\tsoefinding.findingJson.data.forEach(d => {\r\n\t\t// normalise region names to match UI\r\n\t\td.Region = d.Region.replace(\" NRM region\", \"\")\r\n\t\td.Region = d.Region.replace(\" Wide\", \"\")\r\n\r\n\t\tregions.get(d.Region).push(d)\r\n\t})\r\n\r\n\t// initialise items we will use this in the loop of regions\r\n\tconst qldTotal = regions.get(\"Queensland\").find(d => d.Use == \"total area mapped\")[\"total area mapped\"]\r\n\tsoefinding.state.series4 = {} \r\n\t// we need these now because the individual options for chart 4 will be based on this\r\n\tconst options1 = soefinding.getDefaultStackedColumnChartOptions()\r\n\toptions1.chart.id = \"chart1\"\r\n\toptions1.xaxis.title.text = \"Year\"\r\n\toptions1.yaxis.title.text = \"Hectares\"\r\n\toptions1.yaxis.labels.formatter = val => val >= 1000000 ? `${val/1000000}M` : (val >= 1000 ? `${val/1000}K` : val)\r\n\toptions1.yaxis.labels.minWidth = 30\r\n\toptions1.tooltip.y = { formatter: val => `${val.toLocaleString()} ha` }\r\n\r\n\r\n\t// create series for each region\r\n\tfor(let [region, data] of regions) {\r\n\t\tsoefinding.findingContent[region] = {}\r\n\t\tconst keys = []\r\n\r\n\t\t// chart 1, a stacked column chart, same for qld and each region\r\n\t\tsoefinding.findingContent[region].series1 = data.filter(d => d.Use != \"total area mapped\").map(d => {\r\n\t\t\tlet firstIndex = -1, lastIndex = 0\r\n\t\t\tyearKeys.forEach((y, i) => {\r\n\t\t\t\tif (firstIndex == -1 && d[y] != null)\r\n\t\t\t\t\tfirstIndex = i\r\n\t\t\t\tif  (d[y] != null)\r\n\t\t\t\t\tlastIndex = i\r\n\t\t\t})\r\n\t\t\t\r\n\t\t\tkeys[0] = firstIndex\r\n\t\t\tkeys[1] = lastIndex\r\n\r\n\t\t\tsoefinding.findingContent[region].series1categories = [yearKeys[firstIndex], yearKeys[lastIndex]]\r\n\r\n\t\t\treturn {\r\n\t\t\t\tname: d.Use,\r\n\t\t\t\tdata: soefinding.findingContent[region].series1categories.map(c => d[c])\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// chart 2, a pie chart, same for qld and each region\r\n\t\tsoefinding.findingContent[region].series2LatestYear = soefinding.findingContent[region].series1categories[1]\r\n\t\tsoefinding.findingContent[region].series2 = data.filter(d => d.Use != \"total area mapped\").map(d => d[soefinding.findingContent[region].series2LatestYear])\r\n\t\tconst totalRural = soefinding.findingContent[region].series2.reduce((acc, curr) => acc+curr)\r\n\t\tconst totalMapped = data.find(d => d.Use == \"total area mapped\")[\"total area mapped\"]\r\n\t\tconst nonRural = totalMapped - totalRural\r\n\t\tsoefinding.findingContent[region].series2.push(nonRural)\r\n\r\n\t\t// chart 3, a pie chart, regions only\r\n\t\tsoefinding.findingContent[region].series3 = [totalRural, qldTotal - totalRural]\r\n\r\n\r\n\t\t//chart 4 is a column chart for each regions that iis only showed on qld page.\r\n\t\tif (region != \"Queensland\") {\r\n\t\t\tconst years = keys.map(k => yearKeys[k])\r\n\t\t\tconst options = JSON.parse(JSON.stringify(options1))\r\n\t\t\toptions.yaxis.labels.formatter = options1.yaxis.labels.formatter\r\n\t\t\toptions.tooltip.y.formatter = options1.tooltip.y.formatter\r\n\t\t\toptions.xaxis.categories = years\r\n\r\n\t\t\tsoefinding.state.series4[region] = {\r\n\t\t\t\tchecked: false,\r\n\t\t\t\tchartactive: true,\r\n\t\t\t\tyears,\r\n\t\t\t\toptions,\r\n\t\t\t\tseries: data.filter(d => d.Use != \"total area mapped\").map(d => {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tname: d.Use,\r\n\t\t\t\t\t\tdata: years.map(y => d[y])\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsoefinding.findingContent.Queensland.series3 = [0, 0] // not used but needed to avoid error\r\n\r\n\tsoefinding.state.series4[\"Burnett Mary\"].checked = true\r\n\r\n\r\n\t// set up chart 1\r\n\toptions1.xaxis.categories = soefinding.findingContent[soefinding.state.currentRegionName].series1categories\r\n\r\n\tsoefinding.state.chart1 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series1,\r\n\t\toptions: options1,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// set up chart 2\r\n\tconst options2 = soefinding.getDefaultPieChartOptions()\r\n\toptions2.chart.type= \"donut\"\r\n\toptions2.labels = [\"Rural Land in Intensive Use\", \"Rural Land in Extensive Use\", \"Rural Land Not Settled\", \"Non Rural area\"]\r\n\toptions2.xaxis.categories = [\"Use\", soefinding.findingContent[soefinding.state.currentRegionName].seriesLatestYear]\r\n\toptions2.tooltip = { y: { formatter: (val, options) => {\r\n\t\tconst percent = options.globals.seriesPercent[options.seriesIndex][0]\r\n\t\treturn `${val.toLocaleString()} (${percent.toFixed(1)}%)`\r\n\t}}}\r\n\r\n\tsoefinding.state.chart2 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\r\n\t\toptions: options2,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// set up chart 3\r\n\tconst options3 = soefinding.getDefaultPieChartOptions()\r\n\toptions3.chart.type = \"donut\"\r\n\toptions3.labels = [soefinding.state.currentRegionName + \" NRM Region\", \"All Other Qld\"]\r\n\toptions3.xaxis.categories = [\"Name\", \"Value\"]\r\n\toptions3.tooltip = { y: { formatter: options2.tooltip.y.formatter } }\r\n\r\n\tsoefinding.state.chart3 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series3,\r\n\t\toptions: options3,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// chart 4 already done in loop\r\n\r\n\tsoefinding.vueApp = new Vue({\r\n\t\tel: \"#chartContainer\",\r\n\t\tdata: soefinding.state,\r\n\t\tcomputed: {\r\n\t\t\theading1: function() { \r\n\t\t\t\tlet retVal = `Rural area growth between ${soefinding.findingContent[this.currentRegionName].series1categories[0]} and ${soefinding.findingContent[this.currentRegionName].series1categories[1]}`\r\n\t\t\t\tif (this.currentRegionName == \"Queensland\")\r\n\t\t\t\t\tretVal += \"*\"\r\n\t\t\t\telse\r\n\t\t\t\t\tretVal += ` in ${this.currentRegionName}`\r\n\t\t\t\treturn retVal\r\n\t\t\t},\r\n\t\t\theading2: function() {\r\n\t\t\t\tlet retVal = `Proportion of rural and other areas as at ${soefinding.findingContent[this.currentRegionName].series2LatestYear}`\r\n\t\t\t\tif (this.currentRegionName == \"Queensland\")\r\n\t\t\t\t\tretVal += \"*\"\r\n\t\t\t\telse\r\n\t\t\t\t\tretVal += ` in ${this.currentRegionName}`\r\n\t\t\t\treturn retVal\r\n\t\t\t},\r\n\t\t\theading3: function() {\r\n\t\t\t\treturn `Proportion of Queensland made up of rural areas in ${this.currentRegionName} NRM region in ${soefinding.findingContent[this.currentRegionName].series2LatestYear}`\t\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tformatter1: val => val.toLocaleString()\r\n\t\t}\r\n\t})\r\n\r\n\r\n\twindow.soefinding.onRegionChange = function () {\r\n\r\n\t\tsoefinding.vueApp.chart1.options.xaxis.categories = soefinding.findingContent[soefinding.state.currentRegionName].series1categories\r\n\t\tsoefinding.vueApp.chart1.series = soefinding.findingContent[soefinding.state.currentRegionName].series1\r\n\r\n\t\tsoefinding.vueApp.chart2.options.xaxis.categories[1] = soefinding.findingContent[soefinding.state.currentRegionName].series2LatestYear\r\n\t\tsoefinding.vueApp.chart2.series = soefinding.findingContent[soefinding.state.currentRegionName].series2\r\n\r\n\t\tsoefinding.vueApp.chart3.options.labels[0] = soefinding.state.currentRegionName + \" NRM Region\"\r\n\t\tsoefinding.vueApp.chart3.series = soefinding.findingContent[soefinding.state.currentRegionName].series3\r\n\r\n\t\tsoefinding.loadFindingHtml()\r\n\t}\r\n\r\n})"],"mappings":"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","names":[]}
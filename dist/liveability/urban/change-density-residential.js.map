{"version":3,"sources":["../../../src/liveability/urban/change-density-residential.js"],"sourcesContent":["\"use strict\";\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\tconst densityKeys = soefinding.findingJson.meta.fields.slice(2, 4)\r\n\tconst lotKeys = soefinding.findingJson.meta.fields.slice(-2)\r\n\r\n\t// 1. column chart for qld only, dwelling density\r\n\tconst series1Items = soefinding.findingJson.data.filter(d => d.Measure == \"Dwelling density\" && d[\"Regional Planning Area\"] != \"Queensland\")\r\n\tconst series1 = densityKeys.map(k => {\r\n\t\treturn {\r\n\t\t\tname: k,\r\n\t\t\tdata: series1Items.map(d => d[k])\r\n\t\t}\r\n\t})\r\n\r\n\tconst options1 = soefinding.getDefaultColumnChartOptions()\r\n\toptions1.xaxis.categories = series1Items.map(d => d[\"Regional Planning Area\"].split(/\\s|–/))\r\n\toptions1.xaxis.labels.hideOverlappingLabels = false\r\n\toptions1.xaxis.labels.rotate = 0\r\n\toptions1.xaxis.labels.rotateAlways = false\r\n\toptions1.xaxis.tickPlacement = \"between\"\r\n\toptions1.xaxis.title.text = \"Region planning area\"\r\n\toptions1.yaxis.title.text = \"Dwellings/hectare\"\r\n\toptions1.yaxis.tickAmount = 4\r\n\toptions1.yaxis.labels.formatter = val => Math.round(val)\r\n\toptions1.tooltip.y = { formatter: val => val }\r\n\r\n\tsoefinding.state.chart1 = {\r\n\t\tseries: series1,\r\n\t\toptions: options1,\r\n\t\tchartactive: true,\r\n\t}\r\n\tsoefinding.findingContent.Queensland = { html: \"\" }\r\n\r\n\r\n\t// 2. column chart for each region, dwelling density\r\n\tseries1Items.forEach(d => {\r\n\t\tsoefinding.findingContent[d[\"Regional Planning Area\"]] = {\r\n\t\t\tseries2: [{\r\n\t\t\t\tname: \"Density\",\r\n\t\t\t\tdata: densityKeys.map(k => d[k])\r\n\t\t\t}]\r\n\t\t}\r\n\t})\r\n\r\n\tconst options2 = soefinding.getDefaultColumnChartOptions()\r\n\toptions2.xaxis.categories = densityKeys\r\n\toptions2.xaxis.tickPlacement = \"between\"\r\n\toptions2.xaxis.title.text = \"Year\"\r\n\toptions2.yaxis.title.text = \"Dwellings/hectare\"\r\n\r\n\tsoefinding.state.chart2 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series2,\r\n\t\toptions: options2,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// 3. column chart for qld only, Median lot size\r\n\tconst series3Items = soefinding.findingJson.data.filter(d => \r\n\t\t\td.Measure == \"Median lot size\" \r\n\t\t\t&& d[lotKeys[0]] != null\r\n\t\t\t&& d[\"Regional Planning Area\"] != \"Queensland\" )\r\n\tconst series3 = lotKeys.map(k => {\r\n\t\treturn {\r\n\t\t\tname: k,\r\n\t\t\tdata: series3Items.map(d => d[k])\r\n\t\t}\r\n\t})\r\n\r\n\tconst options3 = soefinding.getDefaultColumnChartOptions()\r\n\toptions3.xaxis.categories = series3Items.map(d => d[\"Regional Planning Area\"].split(/\\s|–/))\r\n\toptions3.xaxis.labels.hideOverlappingLabels = false\r\n\toptions3.xaxis.labels.rotate = 0\r\n\toptions3.xaxis.labels.rotateAlways = false\r\n\toptions3.xaxis.tickPlacement = \"between\"\r\n\toptions3.xaxis.title.text = \"Regional planning area\"\r\n\toptions3.yaxis.title.text = \"Median lot size registered m²\"\r\n\r\n\tsoefinding.state.chart3 = {\r\n\t\tseries: series3,\r\n\t\toptions: options3,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// 4. column chart for each region, Median lot size\r\n\tfor(let regionName in soefinding.findingContent)\r\n\t\tsoefinding.findingContent[regionName].series4 = null //initialise, not all will have data\r\n\tseries3Items.forEach(d => {\r\n\t\tsoefinding.findingContent[d[\"Regional Planning Area\"]].series4 = [{\r\n\t\t\tname: \"Size\",\r\n\t\t\tdata: lotKeys.map(k => d[k])\r\n\t\t}]\r\n\t})\r\n\r\n\tconst options4 = JSON.parse(JSON.stringify(options2))\r\n\toptions4.xaxis.categories = lotKeys\r\n\toptions4.yaxis.title.text = \"Median lot size registered m²\"\r\n\r\n\tsoefinding.state.chart4 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series4,\r\n\t\toptions: options4,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\t// 5. column chart for qld only, urban lot registrations\r\n\tconst series5Items = soefinding.findingJson.data.filter(d => \r\n\t\t\td.Measure == \"Lot registrations\" \r\n\t\t\t&& d[lotKeys[0]] != null\r\n\t\t\t&& d[\"Regional Planning Area\"] != \"Queensland\" )\r\n\tconst series5 = lotKeys.map(k => {\r\n\t\treturn {\r\n\t\t\tname: k,\r\n\t\t\tdata: series5Items.map(d => d[k])\r\n\t\t}\r\n\t})\r\n\r\n\tconst options5 = JSON.parse(JSON.stringify(options3))\r\n\toptions5.yaxis.title.text = \"Number of urban lot registrations\"\r\n\r\n\tsoefinding.state.chart5 = {\r\n\t\tseries: series5,\r\n\t\toptions: options5,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\t// 6. column chart for each region, lot registrations\r\n\tfor(let regionName in soefinding.findingContent)\r\n\t\tsoefinding.findingContent[regionName].series6 = null //initialise, not all will have data\r\n\tseries5Items.forEach(d => {\r\n\t\tsoefinding.findingContent[d[\"Regional Planning Area\"]].series6 = [{\r\n\t\t\tname: \"Size\",\r\n\t\t\tdata: lotKeys.map(k => d[k])\r\n\t\t}]\r\n\t})\r\n\r\n\tconst options6 = JSON.parse(JSON.stringify(options4))\r\n\toptions6.xaxis.categories = lotKeys\r\n\toptions6.yaxis.title.text = options5.yaxis.title.text\r\n\r\n\tsoefinding.state.chart6 = {\r\n\t\tseries: soefinding.findingContent[soefinding.state.currentRegionName].series6,\r\n\t\toptions: options6,\r\n\t\tchartactive: true,\r\n\t}\r\n\r\n\r\n\r\n\tnew Vue({\r\n\t\tel: \"#chartContainer\",\r\n\t\tdata: soefinding.state,\r\n\t\tcomputed: {\r\n\t\t\theading1: () => \"Mean population-weighted dwelling density for Queensland\",\r\n\t\t\theading2: function() {\r\n\t\t\t\treturn `Mean population-weighted dwelling density for ${this.currentRegionName}`\r\n\t\t\t},\r\n\t\t\theading3: () => \"Change in median lot size in regions for Queensland\",\r\n\t\t\theading4: function() {\r\n\t\t\t\treturn `Change in median lot size in regions for ${this.currentRegionName}`\r\n\t\t\t},\r\n\t\t\theading5: () => \"Change in number of urban lot registrations for Queensland\",\r\n\t\t\theading6: function() {\r\n\t\t\t\treturn `Change in number of urban lot registrations for ${this.currentRegionName}`\r\n\t\t\t},\r\n\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tformatter1: val => val.toFixed(1),\r\n\t\t\tformatter4: val => val\r\n\t\t}\r\n\t})\r\n\r\n\t\r\n\twindow.soefinding.onRegionChange = function () {\r\n\t\tsoefinding.state.chart2.series = soefinding.findingContent[soefinding.state.currentRegionName].series2\r\n\t\tsoefinding.state.chart4.series = soefinding.findingContent[soefinding.state.currentRegionName].series4\r\n\t\tsoefinding.state.chart6.series = soefinding.findingContent[soefinding.state.currentRegionName].series6\r\n\r\n\r\n\t\tsoefinding.loadFindingHtml()\r\n\t}\r\n\r\n\r\n})"],"mappings":"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","names":[]}
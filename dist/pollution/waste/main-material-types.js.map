{"version":3,"sources":["../../../src/pollution/waste/main-material-types.js"],"sourcesContent":["\"use strict\"\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n\n\tconst yearKeys = soefinding.findingJson.meta.fields.slice(4)\n\tconst latestYear = yearKeys[yearKeys.length - 1]\n\n\t// groupings\n\tconst materials = {}\n\tconst extents = { Australia: [], Queensland: [], }\n\tconst sites = {}\n\tsoefinding.findingJson.data.forEach(d => {\n\t\tif (!materials[d.Material])\n\t\t\tmaterials[d.Material] = []\n\t\tmaterials[d.Material].push(d)\n\n\t\tif (d.Extent == \"Queensland\")\n\t\t\textents.Queensland.push(d)\n\t\telse\n\t\t\textents.Australia.push(d)\n\n\t\tif (!sites[d.Site])\n\t\t\tsites[d.Site] = []\n\t\tsites[d.Site].push(d)\n\t})\n\n\n\t// 1. column chart, count by type\n\tconst countAllSeries = Object.keys(extents).map(e => {\n\t\treturn {\n\t\t\tname: e,\n\t\t\tdata: extents[e].filter(d => d.Measure == \"Count\" && d.Site == \"All\" && d.Material != \"Large items\").map(d => Math.ceil(d[latestYear]))\n\t\t}\n\t})\n\n\n\tconst options1 = soefinding.getDefaultBarChartOptions()\n\toptions1.xaxis.categories = Object.keys(materials).filter(m => m != \"Large items\")\n\toptions1.xaxis.title.text = \"Litter Type\"\n\toptions1.yaxis.title.text = \"Number of items per 100m²\"\n\n\tsoefinding.state.chart1 = {\n\t\toptions: options1,\n\t\tseries: countAllSeries,\n\t\tchartactive: true,\n\t};\n\n\n\t// 2. column chart, count by volume\n\tconst volumeAllSeries = Object.keys(extents).map(e => {\n\t\treturn {\n\t\t\tname: e,\n\t\t\tdata: extents[e].filter(d => d.Measure == \"Volume\"/* && d.Site == \"All\"*/).map(d => d[latestYear])\n\t\t}\n\t})\n\n\tconst options2 = JSON.parse(JSON.stringify(options1))\n\toptions2.xaxis.categories = Object.keys(materials)\n\toptions2.yaxis.title.text = \"Litres per 100m²\"\n\toptions2.yaxis.tickAmount = 4\n\toptions2.yaxis.max = 2.0\n\toptions2.yaxis.labels.formatter = val => val.toLocaleString(undefined, { minimumFractionDigits: 1, maximumFractionDigits: 1 })\n\n\n\tsoefinding.state.chart2 = {\n\t\toptions: options2,\n\t\tseries: volumeAllSeries,\n\t\tchartactive: true,\n\t};\n\n\n\t//3 and 4. stacked column, litter count by type in Queensland and Australia\n\tconst options3 = JSON.parse(JSON.stringify(options1))\n\toptions3.chart.stacked = true\n\toptions3.legend.inverseOrder = true\n\toptions3.xaxis.categories = yearKeys.map(y => y.replace(\"-\", \"–\")) // ndash\n\toptions3.xaxis.title.text = \"Year\"\n\toptions3.yaxis.labels.formatter = val => `${val.toFixed(0)}`\n\toptions3.tooltip = { y: { formatter: val => val } }\n\tconst options4 = JSON.parse(JSON.stringify(options3))\n\toptions4.tooltip = options4.tooltip\n\n\tObject.keys(extents).forEach((e, i) => {\n\t\tconst countAllItems = soefinding.findingJson.data.filter(d =>\n\t\t\td.Extent == e\n\t\t\t&& d.Measure == \"Count\"\n\t\t\t&& d.Site == \"All\")\n\t\tcountAllItems.sort(function (a, b) {\n\t\t\treturn b[latestYear] - a[latestYear]\n\t\t})\n\t\tconst countAllSeries = countAllItems.map(d => {\n\t\t\treturn {\n\t\t\t\tname: d.Material,\n\t\t\t\tdata: yearKeys.map(y => d[y])\n\t\t\t}\n\t\t})\n\n\t\tsoefinding.state[i == 0 ? \"chart3\" : \"chart4\"] = {\n\t\t\toptions: i == 0 ? options3 : options4,\n\t\t\tseries: countAllSeries,\n\t\t\tchartactive: true,\n\t\t}\n\t})\n\n\n\t//5 and 6. stacked column, cigarette and non-cigarette count by type in Queensland and Australia\n\tconst options5 = JSON.parse(JSON.stringify(options3))\n\toptions5.xaxis.categories = Object.keys(sites)  // not large items\n\toptions5.yaxis.labels.formatter = val => Math.round(val)\n\toptions5.tooltip = { y: { formatter: (val, options) => (options.seriesIndex == 0 ? val : val.toFixed(1)) } }\n\n\n\tObject.keys(extents).forEach((e, i) => {\n\t\tconst cigaretteItems = soefinding.findingJson.data.filter(d =>\n\t\t\td.Extent == e\n\t\t\t&& d.Material == \"Cigarettes\"\n\t\t\t&& d.Measure == \"Count\"\n\t\t)\n\t\tconst cigaretteSeries = [\n\t\t\t{\n\t\t\t\tname: \"Cigarette\",\n\t\t\t\tdata: cigaretteItems.map(c => c[latestYear])\n\t\t\t}\n\t\t]\n\t\tconst nonCigaretteItems = soefinding.findingJson.data.filter(d =>\n\t\t\td.Extent == e\n\t\t\t&& d.Material != \"Cigarettes\"\n\t\t\t&& d.Measure == \"Count\"\n\t\t)\n\n\t\tcigaretteSeries.push({\n\t\t\tname: \"Non-cigarette\",\n\t\t\tdata: Object.keys(sites).map(s => {\n\t\t\t\treturn nonCigaretteItems.filter(nci => nci.Site == s).reduce(function (a, c) {\n\t\t\t\t\treturn a + c[latestYear]\n\t\t\t\t}, 0)\n\t\t\t})\n\t\t})\n\n\t\tsoefinding.state[`chart${i + 5}`] = {\n\t\t\toptions: options5,\n\t\t\tseries: cigaretteSeries,\n\t\t\tchartactive: true,\n\t\t}\n\t})\n\n\n\t//7. Litter type by site in qld\n\tconst materialSiteQldItems = extents.Queensland.filter(d => d.Measure == \"Count\")\n\tconst materialSiteQldSeries = []\n\tfor (let material in materials) {\n\t\tif (material == \"Large items\") continue\n\t\tmaterialSiteQldSeries.push({\n\t\t\tname: material,\n\t\t\tdata: materialSiteQldItems.filter(d => d.Material == material).map(d => d[latestYear])\n\t\t})\n\t}\n\n\tconst options7 = JSON.parse(JSON.stringify(options5))\n\toptions7.yaxis.labels.formatter = val => Math.round(val)\n\toptions7.tooltip.y.formatter = function (val) {\n\t\treturn val\n\t}\n\n\tsoefinding.state.chart7 = {\n\t\toptions: options7,\n\t\tseries: materialSiteQldSeries,\n\t\tchartactive: true,\n\t}\n\n\n\t// charts 8–13, line chart for each material type in qld and aust\n\tconst options8 = soefinding.getDefaultLineChartOptions()\n\toptions8.xaxis.axisTicks = { show: false }\n\toptions8.xaxis.categories = yearKeys.map(y => [y.slice(0, 4) + \"–\", y.slice(5)]) // ndash\n\toptions8.xaxis.labels.rotateAlways = false\n\toptions8.xaxis.tickPlacement = \"between\"\n\toptions8.xaxis.title.text = \"Year\"\n\toptions8.yaxis.title.text = \"Number of items per 100m²\"\n\toptions8.yaxis.min = 0\n\n\tObject.keys(materials).forEach((m, i) => { // chart for each material\n\t\tif (m == \"Large items\") return\n\n\t\tconst series = Object.keys(extents).map(e => {\n\t\t\tconst item = extents[e].find(d => d.Material == m && d.Measure == \"Count\" && d.Site == \"All\")\n\t\t\treturn {\n\t\t\t\tname: e,\n\t\t\t\tdata: yearKeys.map(y => item[y])\n\t\t\t}\n\t\t})\n\n\t\tconst myOptions = JSON.parse(JSON.stringify(options8))\n\t\tswitch (m) {\n\t\t\tcase \"Cigarettes\":\n\t\t\t\tmyOptions.yaxis.max = 50\n\t\t\t\tbreak\n\t\t\tcase \"Glass\":\n\t\t\t\tmyOptions.yaxis.max = 2\n\t\t\t\tmyOptions.yaxis.labels.formatter = val => Math.round(val)\n\t\t\t\tmyOptions.tooltip = { y: { formatter: val => val } }\n\t\t\t\tbreak\n\t\t\tcase \"Metal\":\n\t\t\tcase \"Paper\":\n\t\t\tcase \"Plastic\":\n\t\t\tcase \"Other\":\n\t\t\t\tmyOptions.yaxis.labels.formatter = val => Math.round(val)\n\t\t\t\tmyOptions.tooltip = { y: { formatter: val => val } }\n\t\t\t\tbreak\n\t\t}\n\n\t\tsoefinding.state[`chart${i + 8}`] = {\n\t\t\toptions: myOptions,\n\t\t\tseries: series,\n\t\t\tchartactive: true,\n\t\t}\n\t})\n\n\n\n\tnew Vue({\n\t\tel: \"#chartContainer\",\n\t\tdata: soefinding.state,\n\t\tcomputed: {\n\t\t\theading1: () => `Litter items by type, ${latestYear.replace(\"-\", \"–\")}`,\n\t\t\theading2: () => `Volume of litter by type, ${latestYear.replace(\"-\", \"–\")}`,\n\t\t\theading3: () => \"Average litter count by type in Queensland\",\n\t\t\theading4: () => \"Average litter count by type in Australia\",\n\t\t\theading5: () => `Number of cigarette and non-cigarette litter items by site type in Queensland, ${latestYear.replace(\"-\", \"–\")}`,\n\t\t\theading6: () => `Number of cigarette and non-cigarette litter items by site type in Australia, ${latestYear.replace(\"-\", \"–\")}`,\n\t\t\theading7: () => `Litter type by site type in Queensland, ${latestYear.replace(\"-\", \"–\")}`,\n\t\t\theading8: () => `Cigarettes — Comparison of trends in litter count by Queensland and Australia`,\n\t\t\theading9: () => `Glass — Comparison of trends in litter count by Queensland and Australia`,\n\t\t\theading10: () => `Metal — Comparison of trends in litter count by Queensland and Australia`,\n\t\t\theading11: () => `Paper — Comparison of trends in litter count by Queensland and Australia`,\n\t\t\theading12: () => `Plastic — Comparison of trends in litter count by Queensland and Australia`,\n\t\t\theading13: () => `Other material type — Comparison of trends in litter count by Queensland and Australia`,\n\t\t},\n\t\tmethods: {\n\t\t\tformatter1: val => val,\n\t\t\tformatter2: val => val.toLocaleString(undefined, { minimumFractionDigits: 3 }),\n\t\t\tformatter3: val => val == null ? null : Number.isInteger(val) ? val : val.toLocaleString(undefined, { minimumFractionDigits: 1 }),\n\t\t\tonStackedRadioClick: function (chart) {\n\t\t\t\tchart.options.chart.type = \"bar\"\n\t\t\t\tchart.options.chart.stacked = true\n\t\t\t},\n\t\t\tonLineRadioClick: function (chart) {\n\t\t\t\tchart.options.chart.type = \"line\"\n\t\t\t\tchart.options.chart.stacked = false\n\t\t\t\tthis.chart1.options.markers = { size: 4 } // ignored by column chart\n\t\t\t\tthis.chart1.options.tooltip.shared = false\n\t\t\t}\n\t\t}\n\t})\n})\n"],"mappings":"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","names":[]}
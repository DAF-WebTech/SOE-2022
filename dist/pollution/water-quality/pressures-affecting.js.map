{"version":3,"sources":["../../../src/pollution/water-quality/pressures-affecting.js"],"sourcesContent":["\"use strict\"\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n\r\n\t// first group our data by region\r\n\tconst regions = new Map()\r\n\r\n\tsoefinding.findingJson.data.forEach(d => {\r\n\t\tif (!regions.has(d[\"Water quality report card\"]))\r\n\t\t\tregions.set(d[\"Water quality report card\"], [])\r\n\r\n\t\tregions.get(d[\"Water quality report card\"]).push(d)\r\n\t})\r\n\r\n\tfor (const [region, data] of regions) {\r\n\r\n\t\tif (region == \"Reef Water Quality report card\") {\r\n\t\t\tsoefinding.findingContent[region] = {\r\n\t\t\t\tseries: {\r\n\t\t\t\t\theadings: [\"Year\", \"Progress toward the 2025 land management target\", \"Per cent (%) of land in priority areas managed using best management practice systems for water quality outcomes (soil, nutrient and pesticides)\"],\r\n\t\t\t\t\tdata: data.map(d => {\r\n\t\t\t\t\t\treturn [\r\n\t\t\t\t\t\t\td.Year,\r\n\t\t\t\t\t\t\td[\"Identified pressure\"],\r\n\t\t\t\t\t\t\td[\"Per cent of land in priority areas managed using best management practice systems for water quality outcomes (soil, nutrient and pesticides)\"]\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\tsoefinding.findingContent[region] = {\r\n\t\t\t\tseries: {\r\n\t\t\t\t\theadings: [\"Year\", \"Identified pressure\", \"Risk level\", \"Threat level\"],\r\n\t\t\t\t\tdata: data.map(d => [d.Year, d[\"Identified pressure\"], d[\"Risk level\"], d[\"Threat level\"]])\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t} \r\n\r\n\tconst noData = [\"Queensland\", \"Healthy Land and Water South East Queensland report card\",\r\n\t\t\"Fitzroy Basin report card\", \"Gladstone Harbour report card\", \"Mackay–Whitsunday–Isaac report card\",\r\n\t\t\"Wet Tropics Waterways report card\", \"Townsville Dry Tropics report card\"]\r\n\r\n\tnoData.forEach(nd => soefinding.findingContent[nd] = { series: { data: null } })\r\n\r\n\tsoefinding.state.series = soefinding.findingContent[soefinding.state.currentRegionName].series\r\n\r\n\r\n\tnew Vue({\r\n\t\tel: \"#chartContainer\",\r\n\t\tdata: soefinding.state,\r\n\t\tcomputed: {\r\n\t\t\theading1: function () {\r\n\t\t\t\treturn `Pressures identified in ${this.currentRegionName}`\r\n\t\t\t}\r\n\t\t},\r\n\t\tmethods: {\r\n\t\t\tformatter1: val => val ?? \"\",\r\n\t\t}\r\n\t})\r\n\r\n\r\n\twindow.soefinding.onRegionChange = function () {\r\n\r\n\t\tsoefinding.state.series = this.findingContent[this.state.currentRegionName].series\r\n\r\n\t\tsoefinding.loadFindingHtml()\r\n\t}\r\n\r\n\r\n})\r\n"],"mappings":"aAEA,SAAS,iBAAiB,mBAAoB,UAAY,CAGzD,KAAM,SAAU,GAAI,KAEpB,WAAW,YAAY,KAAK,QAAQ,GAAK,CACxC,GAAI,CAAC,QAAQ,IAAI,EAAE,8BAClB,QAAQ,IAAI,EAAE,6BAA8B,IAE7C,QAAQ,IAAI,EAAE,8BAA8B,KAAK,KAGlD,SAAW,CAAC,OAAQ,OAAS,SAAS,CAErC,GAAI,QAAU,iCAAkC,CAC/C,WAAW,eAAe,QAAU,CACnC,OAAQ,CACP,SAAU,CAAC,OAAQ,kDAAmD,oJACtE,KAAM,KAAK,IAAI,GAAK,CACnB,MAAO,CACN,EAAE,KACF,EAAE,uBACF,EAAE,yJAMF,CACJ,WAAW,eAAe,QAAU,CACnC,OAAQ,CACP,SAAU,CAAC,OAAQ,sBAAuB,aAAc,gBACxD,KAAM,KAAK,IAAI,GAAK,CAAC,EAAE,KAAM,EAAE,uBAAwB,EAAE,cAAe,EAAE,qBAM9E,KAAM,QAAS,CAAC,aAAc,2DAC7B,4BAA6B,gCAAiC,gDAC9D,oCAAqC,sCAEtC,OAAO,QAAQ,IAAM,WAAW,eAAe,IAAM,CAAE,OAAQ,CAAE,KAAM,QAEvE,WAAW,MAAM,OAAS,WAAW,eAAe,WAAW,MAAM,mBAAmB,OAGxF,GAAI,KAAI,CACP,GAAI,kBACJ,KAAM,WAAW,MACjB,SAAU,CACT,SAAU,UAAY,CACrB,MAAO,2BAA2B,KAAK,sBAGzC,QAAS,CACR,WAAY,KAAO,KAAO,MAK5B,OAAO,WAAW,eAAiB,UAAY,CAE9C,WAAW,MAAM,OAAS,KAAK,eAAe,KAAK,MAAM,mBAAmB,OAE5E,WAAW","names":[]}